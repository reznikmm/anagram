------------------------------------------------------------------------------
--                        G E L A   G R A M M A R S                         --
--          Library for dealing with grammars for Gela project,             --
--                        a portable Ada compiler                           --
--                        http://gela.ada-ru.org/                           --
--                     - - - - - - - - - - - - - - -                        --
--              Read copyright and license in gela.ads file                 --
------------------------------------------------------------------------------

--  with AMF.Extents;
with AMF.CMOF.Associations;
with AMF.CMOF.Classes;
--  with AMF.CMOF.Classes.Hash;
with AMF.CMOF.Classes.Collections;
with AMF.CMOF.Packageable_Elements.Collections;
with AMF.CMOF.Packages;
with AMF.CMOF.Properties;
with AMF.CMOF.Properties.Collections;
with AMF.CMOF.Types;
with AMF.Facility;
with AMF.Factories.CMOF_Factories;
with XMI.Writer;
with AMF.URI_Stores;

with League.Strings.Hash;

with Ada.Wide_Wide_Text_IO;
with Ada.Containers.Hashed_Maps;

package body Gela.Grammars.CMOF_Writer is

   use type League.Strings.Universal_String;

   package Class_Maps is new Ada.Containers.Hashed_Maps
     (League.Strings.Universal_String,
      AMF.CMOF.Classes.CMOF_Class_Access,
      League.Strings.Hash,
      League.Strings."=",
      AMF.CMOF.Classes."=");

   -----------
   -- Write --
   -----------

   procedure Write (Input : Gela.Grammars.Grammar) is
      function New_Class
        (Name        : League.Strings.Universal_String;
         Is_Abstract : Boolean;
         Parent      : AMF.CMOF.Classes.CMOF_Class_Access := null)
        return AMF.CMOF.Classes.CMOF_Class_Access;

      procedure Create_Link
        (Name      : League.Strings.Universal_String;
         From, To  : AMF.CMOF.Classes.CMOF_Class_Access;
         Is_Option : Boolean := False;
         Is_List   : Boolean := False);

      procedure Create_Production
        (Production     : Gela.Grammars.Production;
         Abstract_Class : AMF.CMOF.Classes.CMOF_Class_Access);

      CMOF_Factory : AMF.Factories.CMOF_Factories.CMOF_Factory_Access;
      Packaged     : AMF.CMOF.Packageable_Elements.Collections
        .Set_Of_CMOF_Packageable_Element;
      Token_Class  : AMF.CMOF.Classes.CMOF_Class_Access;
      NT_Classes   : Class_Maps.Map;

      -----------------
      -- Create_Link --
      -----------------

      procedure Create_Link
        (Name      : League.Strings.Universal_String;
         From, To  : AMF.CMOF.Classes.CMOF_Class_Access;
         Is_Option : Boolean := False;
         Is_List   : Boolean := False)
      is
         Property_From : constant AMF.CMOF.Properties.CMOF_Property_Access :=
           CMOF_Factory.Create_Property;
         Property_To : constant AMF.CMOF.Properties.CMOF_Property_Access :=
           CMOF_Factory.Create_Property;
         Association : constant AMF.CMOF.Associations.CMOF_Association_Access
           := CMOF_Factory.Create_Association;
         Member_End : AMF.CMOF.Properties.Collections
           .Ordered_Set_Of_CMOF_Property := Association.Get_Member_End;
         Owned_Attr : AMF.CMOF.Properties.Collections
           .Ordered_Set_Of_CMOF_Property := From.Get_Owned_Attribute;
         Owned_End : AMF.CMOF.Properties.Collections
           .Ordered_Set_Of_CMOF_Property := Association.Get_Owned_End;
      begin
         Property_From.Set_Name ((False, Name));
         Property_From.Set_Visibility ((False, AMF.CMOF.Public_Visibility));
         Property_From.Set_Is_Composite (True);

         if Is_Option or Is_List then
            Property_From.Set_Lower ((False, 0));
         else
            Property_From.Set_Lower ((False, 1));
         end if;

         if Is_List then
            Property_From.Set_Upper ((False, AMF.Unlimited));
         else
            Property_From.Set_Upper ((False, (False, 1)));
         end if;

         Property_From.Set_Is_Ordered (True);
         Property_From.Set_Is_Unique (True);
         Property_From.Set_Type (AMF.CMOF.Types.CMOF_Type_Access (From));

         Property_To.Set_Visibility ((False, AMF.CMOF.Public_Visibility));
         Property_To.Set_Is_Composite (False);
         Property_To.Set_Type (AMF.CMOF.Types.CMOF_Type_Access (To));
         Property_To.Set_Name
           ((False, "To" & Name));

         Member_End.Add (Property_From);
         Member_End.Add (Property_To);

         Owned_Attr.Add (Property_From);
         Owned_End.Add (Property_To);

         Association.Set_Visibility ((False, AMF.CMOF.Public_Visibility));
         Association.Set_Name
           ((False, "Ass" & Name));
         Packaged.Add (Association);
--         Association.Set_
      end Create_Link;

      -----------------------
      -- Create_Production --
      -----------------------

      procedure Create_Production
        (Production     : Gela.Grammars.Production;
         Abstract_Class : AMF.CMOF.Classes.CMOF_Class_Access)
      is
         Node_Class : constant AMF.CMOF.Classes.CMOF_Class_Access := New_Class
           (Name        => Production.Name,
            Is_Abstract => False,
            Parent      => Abstract_Class);
      begin
         for Part of Input.Part (Production.First .. Production.Last) loop
            if Part.Is_Terminal_Reference then
               Create_Link (Part.Name, From => Node_Class, To => Token_Class);
            elsif Part.Is_Option then
               declare
                  Prod : Gela.Grammars.Production renames
                    Input.Production (Part.First);
                  P : Gela.Grammars.Part renames Input.Part (Prod.First);
               begin
                  if Part.First /= Part.Last or else
                    Prod.First /= Prod.Last or else
                    P.Is_List
                  then
                     raise Program_Error;
                  elsif P.Is_Terminal_Reference then
                     Create_Link
                       (Part.Name,
                        From => Node_Class,
                        To => Token_Class,
                        Is_Option => True);
                  else
                     declare
                        NT : Gela.Grammars.Non_Terminal renames
                          Input.Non_Terminal (P.Denote);
                     begin
                        Create_Link
                          (Part.Name,
                           From => Node_Class,
                           To   => NT_Classes (NT.Name),
                           Is_Option => True);
                     end;
                  end if;
               end;
            else
               declare
                  NT : Gela.Grammars.Non_Terminal renames
                    Input.Non_Terminal (Part.Denote);
               begin
                  Create_Link
                    (Part.Name,
                     From => Node_Class,
                     To   => NT_Classes (NT.Name));
               end;
            end if;
         end loop;
      end Create_Production;

      ---------------
      -- New_Class --
      ---------------

      function New_Class
        (Name        : League.Strings.Universal_String;
         Is_Abstract : Boolean;
         Parent      : AMF.CMOF.Classes.CMOF_Class_Access := null)
         return AMF.CMOF.Classes.CMOF_Class_Access
      is
         use type AMF.CMOF.Classes.CMOF_Class_Access;

         Result : constant AMF.CMOF.Classes.CMOF_Class_Access :=
           CMOF_Factory.Create_Class;
      begin
         Result.Set_Visibility ((False, AMF.CMOF.Public_Visibility));
         Result.Set_Is_Abstract (Is_Abstract);
         Result.Set_Name ((False, Name));

         if Parent /= null then
            declare
               Super : AMF.CMOF.Classes.Collections.Set_Of_CMOF_Class :=
                 Result.Get_Super_Class;
            begin
               Super.Add (Parent);
            end;
         end if;

         Packaged.Add (Result);

         return Result;
      end New_Class;

      Store  : AMF.URI_Stores.URI_Store_Access;
--      Target : AMF.Extents.Extent_Access;
      Text : League.Strings.Universal_String;
      CMOF_URI : constant League.Strings.Universal_String :=
        League.Strings.To_Universal_String
          ("http://schema.omg.org/spec/MOF/2.0/cmof.xml");
      CMOF_Package : AMF.CMOF.Packages.CMOF_Package_Access;
      Root_Class   : AMF.CMOF.Classes.CMOF_Class_Access;
   begin
      AMF.Facility.Initialize;

      Store := AMF.Facility.Create_URI_Store
        (League.Strings.To_Universal_String ("file:///test"));

      CMOF_Factory := AMF.Factories.CMOF_Factories.CMOF_Factory_Access
        (Store.Get_Factory (CMOF_URI));

      CMOF_Package := CMOF_Factory.Create_Package;
      CMOF_Package.Set_Visibility ((False, AMF.CMOF.Public_Visibility));
      CMOF_Package.Set_Name
        ((False, League.Strings.To_Universal_String ("Grammar")));
      CMOF_Package.Set_Uri
        ((False, League.Strings.To_Universal_String ("urn:Grammar")));

      Packaged := CMOF_Package.Get_Packaged_Element;

      Root_Class := New_Class
        (Name        => League.Strings.To_Universal_String ("AbstractNode"),
         Is_Abstract => True);

      Token_Class := New_Class
        (Name        => League.Strings.To_Universal_String ("TokenNode"),
         Is_Abstract => False,
         Parent      => Root_Class);

      for NT of Input.Non_Terminal loop
         if not NT.Is_List then
            declare
               Abstract_Class : constant AMF.CMOF.Classes.CMOF_Class_Access :=
                 New_Class
                   (Name        => NT.Name,
                    Is_Abstract => True,
                    Parent      => Root_Class);
               Alternative : constant AMF.CMOF.Classes.CMOF_Class_Access :=
                 New_Class
                   (Name        => NT.Name & "Alternative",
                    Is_Abstract => False,
                    Parent      => Abstract_Class);
            begin
               Create_Link
                 (Name => League.Strings.To_Universal_String ("Children"),
                  From => Alternative,
                  To   => Abstract_Class,
                  Is_List => True);

               NT_Classes.Insert (NT.Name, Abstract_Class);
            end;
         end if;
      end loop;

      for NT of Input.Non_Terminal loop
         if not NT.Is_List then
            declare
               Abstract_Class : constant AMF.CMOF.Classes.CMOF_Class_Access :=
                 NT_Classes (NT.Name);
            begin
               for Prod of Input.Production (NT.First .. NT.Last) loop
                  Create_Production (Prod, Abstract_Class);
               end loop;
            end;
         end if;
      end loop;
--
      Text := XMI.Writer (Store);
--      Text := XMI.Writer (AMF.URI_Stores.URI_Store_Access (Target));
      Ada.Wide_Wide_Text_IO.Put_Line (Text.To_Wide_Wide_String);
   end Write;

end Gela.Grammars.CMOF_Writer;
